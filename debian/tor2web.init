#! /bin/sh

### BEGIN INIT INFO
# startup script for Ubuntu and Debian Linux servers
#
# To use this file
# cp tor2web.init.sh /etc/init.d/tor2web
#
# To automatitcally start at reboot
# sudo update-rc.d tor2web defaults
#
# Provides:          tor2web
# Required-Start:    $local_fs $remote_fs
# Required-Stop:     $local_fs $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: tor2web initscript
# Description:       This file starts up the tor2web server.
### END INIT INFO

# Authors: Arturo Filasto' <art@globaleaks.org>
#          Giovanni Pellerano <evilaliv3@globaleaks.org>

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
NAME=tor2web
SCRIPTNAME=/etc/init.d/$NAME
DAEMON=/usr/local/bin/twistd
DAEMON_DIR=/home/tor2web/Tor2web-3.0
DAEMON_PIDFILE=tor2web.pid
DAEMON_USER=tor2web
DAEMON_ARGS="-y /home/tor2web/Tor2web-3.0/run.py --pidfile ${DAEMON_PIDFILE} --uid ${DAEMON_USER} --gid ${DAEMON_USER}"

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
    # Return
    #   0 if daemon has been started
    #   1 if daemon was already running
    #   2 if daemon could not be started
    echo "Starting Tor..."
    /etc/init.d/tor start
    echo "started."    

    # Check to see if the daemon is already running.
    start-stop-daemon --stop --test --quiet --pidfile ${DAEMON_DIR}/${DAEMON_PIDFILE} \
        && echo "Tor2web already running" && return 1

    echo "Starting Tor2web..."
    start-stop-daemon --start --quiet --pidfile ${DAEMON_DIR}/${DAEMON_PIDFILE} \
        --background --exec $DAEMON --chdir $DAEMON_DIR -- $DAEMON_ARGS \
        || return 2
    echo "started."
    return 0;
}

#
# Function that stops the daemon/service
#
do_stop()
{
    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped
    #   other if a failure occurred

    echo "Stopping Tor2web..."
    start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile ${DAEMON_DIR}/${DAEMON_PIDFILE}
    RETVAL=$?
    # Many daemons don't delete their pidfiles when they exit.
    rm -f ${DAEMON_DIR}/${DAEMON_PIDFILE}
    echo "stopped."

    echo "Stopping Tor..."
    /etc/init.d/tor stop
    echo "stopped."

    return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
    #
    # If the daemon can reload its configuration without
    # restarting (for example, when it is sent a SIGHUP),
    # then implement that here.
    #
    start-stop-daemon --stop --signal 1 --quiet --pidfile ${DAEMON_DIR}/${DAEMON_PIDFILE}
    return 0
}

#
# Function that queries the status of the daemon/service
#
do_status()
{
    # Return
    #   0 if daemon is responding and OK
    #   1 if daemon is not responding, but PIDFILE exists
    #   2 if daemon is not responding, but LOCKFILE exists
    #   3 if deamon is not running
    #   4 if daemon status is unknown

    # Check to see if the daemon is already running.
    start-stop-daemon --stop --test --quiet --pidfile ${DAEMON_DIR}/${DAEMON_PIDFILE} \
        && echo "Tor2web running OK." && return 0
    [ -f ${DAEMON_DIR}/${DAEMON_PIDFILE} ] && echo "Tor2web not responding, but PIDFILE exists." && return 1
    echo "Tor2web is not running"
    return 3
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
       status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
